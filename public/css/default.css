
/* :root는 <html>를 선택하는 것!
   html 페이지에 변수를 정의하거나 전역 스타일을 지정할 때 사용.
 */
:root {
  /*main color*/
  --main1: #3d3d3d;
  --main2: #6059f7;
  --main3: #6592fe;
  --main4: #36c3fe;
  --main5: #8c61ff;
  /*box-bg*/
  --box-bg: #f0f1f1;
  /*gray*/
  --gray1: #222222;
  --gray2: #555555;
  --gray3: #717171;
  --gray4: #8f8f8f;
  --gray5: #b7b7b7;
  --gray6: #d6d6d6;
  --gray7: #efefef;
  --gray8: #ffffff;

  /*line-color*/
  --line1: #222222;
  --line2: #d6d6d6;
  --line3: #eaeced;
  --line4: #f6f6f6;
  --line5: #f8f9fa;
}
@font-face {
  font-family: ns-l;
  src: url(/font/NotoSansKR-Light.ttf);
}
@font-face {
  font-family: ns-r;
  src: url(/font/NotoSansKR-Regular.ttf);
}
@font-face {
  font-family: ns-b;
  src: url(/font/NotoSansKR-Bold.ttf);
}
@font-face {
  font-family: ns-black;
  src: url(/font/NotoSansKR-Black.ttf);
}
* {
  margin: 0;
  padding: 0;
  outline: 20; /* 요소의 외곽선 제거 */
  font-family: ns-r;
  list-style-type: none;
  color : var(--main1);
}
a {
  text-decoration: none;  /* a 태그의 기본 밑줄 제거 */
}
.wrap {
  min-height: 100vh;	/* vh == 현재 브라우저 높이의 1%임. 100vh는 ㅎ현재 브라우저 높이와 같음 */
  display: flex;
  flex-direction: column; /* .wrap 내부 요소들이, 수직방향(기본적으로 위에서 아래)으로 배치되도록 설정 */
  min-width: 800px;
  position: relative;
  background-color: var(--box-bg);
}

.header {
  background-color: var(--main2);
  width: 100%;
  position: sticky; /* 스크롤 시, 타 요소와 겹쳐보이나 top : 0의 위치에 도달하면, 본인의 영역을 가진다. fixed랑 비교해볼것. */
  top: 0;
  z-index:1;
}
.header > div {
  padding: 10px;
  max-width: 1400px;
  margin: 0 auto;
  display: flex; /* div가 가지는 logo, nav, 로그인과 회원가입 등.. 블록 요소를 가로로 배치 */
  align-items: center;
}
.header a {
  color: var(--gray8);
}
.logo {
  margin-right: 24px;
}
.logo > a {
  font-family: ns-black;
  font-size: 28px;
}
.nav {
  flex: 1;
  /*
  flex : 1은 아래 3가지를 축약한 형태임.
  
  flex-grow  : 1 : 남은 공간을 1 비율만큼 차지. 부모 컨테이너의 가용 공간이 있을 때, 다른 아이템들과 비율에 따라 공간을 나누게 됩니다.
  flex-shrink: 1 : 공간이 부족할 때, 해당 아이템이 줄어들 수 있음.
  flex-basis : 0%: 아이템의 기본 크기를 0으로 설정하고, 남은 공간을 기준으로 크기를 계산.
  */
}
.nav > ul {
  display: flex;		/* ul 내부의 li(블록)들을 가로로 배치하기 위함 */
  align-items: center;
}
.nav > ul > li {
  margin: 0px 15px;
  position: relative; 
  /* li(공지사항, 자유게시판.....)를 relative로 설정하고
     하위 ul.sub-menu를 absolute로 설정하면, 하위 메뉴의 시작점이
     relative로 지정한 li가 된다..
  */
}
.nav a,
.user-menu a {
  transition-duration: 0.3s; /* transition을 설정한 요소의 이벤트 발생 시, 이벤트 적용을 0.3초간 진행 */
}

.nav a:hover,
.user-menu a:hover {
  color: var(--gray1); /* 상단 :root 내부값을 변수처럼 사용 */
}

.nav .sub-menu {
  display: none;
  position: absolute; /* 가장 가까운 relative 상위 요소를 기준으로 시작점의 위치를 잡는다! */
  width: 130px;
  background-color: #fff;
  border: 1px solid var(--main2);
  border-radius: 5px;
  left: 10px; /* 가장 가까운 relative 상위 요소를 기준으로, 왼쪽에서 10px 떨어진곳에 위치를 잡는다 ! */
  z-index: 1;
}

.sub-menu > li > a {
  color: var(--main2);
  padding: 10px;
  display: block; /* 위 padding 값을 지정하기 위해 inline => block 처리 */
}
.nav > ul > li:hover > .sub-menu {
  display: block;  /* 메인 메뉴에 마우스 올렸을 때, 하위 메뉴를 보여줌 */
}
.sub-menu > li > a:hover {
  background-color: var(--main2);
  color: var(--gray8);
}
.user-menu {
  display: flex;  /* 하위 메뉴 (로그인, 마이페이지, 로그아웃, 회원가입)를 가로로 배치 */
}
.user-menu > li {
  margin-left: 20px;
}

.content {
  width: 100%; /* 상위 요소의 width 전체를 차지 */
  max-width: 1400px;
  margin: 30px auto;
  flex: 1;
  /*
  flex : 1은 아래 3가지를 축약한 형태임.
  
  flex-grow  : 1 : 남은 공간을 1 비율만큼 차지. 부모 컨테이너의 가용 공간이 있을 때, 다른 아이템들과 비율에 따라 공간을 나누게 됩니다.
  flex-shrink: 1 : 공간이 부족할 때, 해당 아이템이 줄어들 수 있음.
  flex-basis : 0%: 아이템의 기본 크기를 0으로 설정하고, 남은 공간을 기준으로 크기를 계산.
  */
}
.page-title {
  font-weight : bold;
  padding: 30px;
  text-align: center;
  font-family: ns-b; /* 상단 @font-face로 지정한 값 사용 */
  font-size: 20px;
  color: var(--main2);
}
.footer {
  background-color: var(--gray6);
}

.footer > div {
  max-width: 1400px;
  padding: 20px 10px;
  margin: 0 auto;
}
.footer ul {
  display: flex;
  gap : 30px;
}
.footer li>a {
  color: var(--main2);
  font-weight: bold;
}
.footer > div > p {
  margin: 10px 0px;
  font-family: ns-b; /* 상단 @font-face로 지정한 값 사용 */
  font-size: 16px;
  font-weight: bold;
}

section.section {
  padding: 20px;
  border-radius: 10px; /* 모서리 둥글게 */
  background-color: var(--gray8);
}
section.section.bg-section {
  background-color: var(--box-bg);
}

[class^="btn-"] { /* 클래스명이 btn- 로 시작하는 태그 */
  cursor: pointer; /* 마우스 hover 시, 손바닥 모양 */
  font-size: 14px;
  padding: 9px 20px;
  border: none;
  border-radius: 5px;
  font-family: ns-b; /* 상단 @font-face로 지정한 값 사용 */
}
.btn-primary {
  border: 1px solid var(--main3);
  background-color: var(--main3);
  color: var(--gray8);
}
.btn-primary:hover {
  background-color: rgba(101, 146, 254, 0.9);
}
.btn-secondary {
  border: 1px solid var(--gray4);
  background-color: var(--gray4);
  color: var(--gray8);
}
.btn-secondary:hover {
  background-color: rgba(143, 143, 143, 0.9); /* 마지막은 투명도 조절 */
}
.btn-point {
  border: 1px solid var(--main5);
  background-color: var(--main5);
  color: var(--gray8);
}
.btn-point:hover {
  background-color: rgba(140, 97, 255, 0.9);
}
.btn-primary.outline {
  color: var(--main3);
  background-color: var(--gray8);
}
.btn-primary.outline:hover {
  background-color: rgba(101, 146, 254, 0.2);
}
.btn-secondary.outline {
  color: var(--gray4);
  background-color: var(--gray8);
}
.btn-secondary.outline:hover {
  background-color: rgba(143, 143, 143, 0.2);
}
.btn-point.outline {
  color: var(--main5);
  background-color: var(--gray8);
}
.btn-point.outline:hover {
  background-color: rgba(140, 97, 255, 0.2);
}
[class^="btn-"].sm { /* 클래스명이 btn- 로 시작하면서 또 다른 클래스명이 sm인 것*/
  padding: 5px 10px;
  font-family: ns-r; /* 상단 @font-face로 지정한 값 사용 */
  font-size: 12px;
}
[class^="btn-"].md { /* 클래스명이 btn- 로 시작하면서 또 다른 클래스명이 lg인 것*/
  padding: 7px 15px;
  font-size: 14px;
  border-radius: 20px;
}
[class^="btn-"].lg { /* 클래스명이 btn- 로 시작하면서 또 다른 클래스명이 lg인 것*/
  padding: 12px 25px;
  font-size: 16px;
  border-radius: 25px;
}

.tbl {
  border-top: 1px solid var(--main3);
  width: 100%;
  border-spacing: 0;
}
.tbl th,
.tbl td {
  text-align: center;
  border-bottom: 1px solid var(--line2);
  padding: 10px 20px;
}
.tbl th.left,
.tbl td.left {
  text-align: left;
}
.tbl th {
  background-color: rgba(101, 146, 254, 0.2);
}
.tbl.tbl-hover tbody > tr:hover {
  cursor: pointer;
  background-color: rgba(101, 146, 254, 0.1);
}
.input-wrap {
  display: flex; /* flex 요소 내부 요소들 유연하게 배치. 기본적으로 가로 방향으로 배치함 */
  flex-direction: column; /* 내부 요소들의 방향 시작점을 수직으로. 즉, 위에서 아래 방향으로 배치 */
}
.input-wrap > .input-title {
  margin-bottom: 10px;
  font-size: 16px;
  font-weight: bold;
  line-height: 1.5; /* 줄간격 */
}
.input-item {
  display: flex;
  gap: 10px; /* 자식 요소들의 공백 간격 */
}
.input-item > input {
  flex: 1;
  font-size: 16px;
  line-height: 1.5;
  border: none;
  border-bottom: 1px solid var(--gray5);
  padding: 8px 0px;
}
.input-item + .input-msg { /* input-item 클래스 바로 다음에 위치하는 input-msg 클래스 (동위 선택자) */
  position: relative; /* input-msg 클래스를 기준점으로! */
  margin-top: 8px;
  padding-left: 24px;
  color: var(--gray3);
  font-size: 14px;
  line-height: 1.5;
}
.input-item + .input-msg::before { /* input-msg 클래스 앞에 가상 요소 생성 */
  content: "";
  display: block;
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 20px;
  background: url(/images/icon_info.svg) no-repeat center / contain;
}
.input-item + .input-msg.valid { /* input-msg 클래스와 valid 클래스를 동시에 가지고 있을 때 */
  color: #1065dc;
}
.input-item + .input-msg.valid::before { /* input-msg 클래스와 valid 클래스를 동시에 가지고 있을 때, 해당 요소 앞에 가상 요소 생성 */
  background: url(/images/icon_info_success.svg) no-repeat center / contain;
}
.input-item + .input-msg.invalid {
  color: #ff3d00;
}
.input-item + .input-msg.invalid::before {
  background: url(/images/icon_info_warning.svg) no-repeat center / contain;
}

.input-item > textarea {
  width: 100%;
  height: 156px;
  padding: 15px;
  resize: none; /* 사이즈 조정 못하도록 제어 */
  font-size: 16px;
  line-height: 24px;
  border: 1px solid var(--line2);
}

.input-wrap > input[type="checkbox"] {
  display: none;
}
.input-wrap > input[type="checkbox"] + label { /* 체크박스 요소 다음에 있는 label */
  position: relative; /* 체크박스 요소를 기준점으로 설정 */
  display: block;
  flex-grow: 1; /* 부모 (input-wrap)이 display:flex 임. 자식 요소들이 남은 공간을 균등하게 배분하도록 설정 */
  padding: 8px 0 8px 30px;
  cursor: pointer;
}
.input-wrap > input[type="checkbox"] + label::before {
  content: "";
  display: block;
  position: absolute;
  left: 0;
  top: 8px;
  width: 24px;
  height: 24px;
  color: var(--main3);
  border-radius: 50%;
  background: url(/images/icon_check.png) no-repeat center / 20px; /* no-repeat은 이미지 반복되지 않도록! 이미지 크기 20px */
}
.input-wrap > input[type="checkbox"]:checked + label::before {
  background: url(/images/icon_check_active.png) no-repeat center / 20px;
}

.input-wrap > input[type="radio"] {
  display: none;
}
.input-wrap > input[type="radio"] + label {
  position: relative;
  display: block;
  flex-grow: 1;
  padding: 8px 0 8px 30px;
  cursor: pointer;
}
.input-wrap > input[type="radio"] + label::before {
  content: "";
  display: block;
  position: absolute;
  left: 0;
  top: 8px;
  width: 24px;
  height: 24px;
  color: var(--main3);
  border-radius: 50%;
  background: url(/images/icon_check.png) no-repeat center / 20px;
}
.input-wrap > input[type="radio"]:checked + label::before {
  background: url(/images/icon_check_active.png) no-repeat center / 20px;
}
.select {
  flex: 1;
  position: relative;
  border: 1px solid var(--line2);
  border-radius: 5px;
  /* 드롭다운 이미지! 아래 select 요소에 지정되는 스타일에서 투명도를 0으로 만들어 이미지가 보이게끔 적용 */
  background: #fff url(/images/icon_arrow_down.svg) no-repeat right 12px center / 12px;
  overflow: hidden;
}
.select > select {
  width: 100%;
  padding: 8px 12px;
  font-size: 16px;
  line-height: 1.5;
  cursor: pointer;
  appearance: none; /* 브라우저에서 자동 설정하는 요소의 기본 스타일 제거 */
  background-color: transparent; /* 요소의 배경색을 투명하게! 투명도 또한 0으로 설정되어 뒤에 있는 요소가 보임 */
  border: 0;
}
.modal-bg {
  background-color: rgba(0, 0, 0, 0.4);
  position: fixed; /* 고정 */
  width: 100vw;
  height: 100vh; /* 뷰포트(브라우저창)의 높이 기준으로 비율 설정! 100vh는 브라우저 전체 높이만큼 지정됨 */
  top: 0;
  left: 0;
  display: none;
  justify-content: center;
  align-items: center;
}
.modal-bg.open {
  display: flex;
}
.modal-container {
  background-color: var(--gray8);
  padding: 40px 20px;
  width: 500px;
  display: flex;
  flex-direction: column;
  border-radius: 10px;
  gap: 20px;
  box-sizing: border-box;
  position: relative;
}
.modal-title {
  font-size: 20px;
  font-family: ns-b;
  line-height: 30px;
  text-align: center;
}
.modal-main {
  flex: 1;
  overflow-y: auto;
  padding: 0px 30px;
}
.modal-content {
  max-height: 200px;
}
.modal-btn-area {
  display: flex;
  gap: 13px;
  justify-content: center;
}
.modal-close-btn {
  position: absolute;
  top: 20px;
  right: 20px;
  font-size: 30px;
  cursor: pointer;
}

.posting-wrap{
	overflow: hidden;
	padding: 10px;
}
.posting-wrap>.posting-item{
	box-sizing: border-box;
	width : 335px;
	float: left;
	padding : 30px
	
}
.posting-item>a{
	display : block;
}
.posting-item:hover{
	box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.2);
}
.posting-img{
	height: 200px;
}
.posting-img>img{
	width:100%;
	height:100%;
	object-fit:contain;
}
.posting-info{
	margin: 10px auto;
	width: 75%
}
.posting-title{
	font-size : 18px;
	font-family : ns-b;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

.pagination {
  list-style-type: none;
  display: flex;
  justify-content: center;
  align-items: center;
}
.posting-sub-info{
	margin : 10px 0px;
}
.posting-sub-info>span{
	font-size: 14px;
	font-family: ns-b;
}

.pagination > li {
  width: 40px;
  height: 40px;
  text-align: center;
  line-height: 40px;
  overflow: hidden;
}
.pagination.circle-style > li {
  border-radius: 50%;
}
.pagination > li > span.page-item:hover{
  cursor: pointer;
}
.pagination > li > span.page-item {
  display: block;
  width: 100%;
  height: 100%;
  font-size: 18px;
}
.pagination > li > span.material-icons {
  display: block;
  width: 100%;
  height: 100%;
  line-height: 40px;
}
.pagination .page-item.active-page {
  background-color: var(--main2);
  color: #fff;
}
